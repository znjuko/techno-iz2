        -:    0:Source:/home/paccbet/techno/technopark-cpp/techno-iz2/src/data_storage/storage.c
        -:    0:Graph:../build/src/data_storage/CMakeFiles/data_storage.dir/storage.c.gcno
        -:    0:Data:../build/src/data_storage/CMakeFiles/data_storage.dir/storage.c.gcda
        -:    0:Runs:3
        -:    1://
        -:    2:// Created by Черных Никита Алекандрович on 3/25/21.
        -:    3://
        -:    4:
        -:    5:#include "storage.h"
        -:    6:
        9:    7:Storage* create_storage(size_t size)
        -:    8:{
        9:    9:    Storage* storage = (Storage*)calloc(1, sizeof(Storage));
        9:   10:    if (!storage) {
    #####:   11:        return NULL;
        -:   12:    }
        9:   13:    storage->size = size;
        9:   14:    storage->points = (Point*)calloc(size, sizeof(Point));
        9:   15:    if (!storage->points) {
    #####:   16:        return NULL;
        -:   17:    }
        -:   18:
        9:   19:    return storage;
        -:   20:}
        -:   21:
        5:   22:void fill_storage(Storage* storage, double (*read_number)(File*),
        -:   23:    File* file_reader)
        -:   24:{
        5:   25:    if (!storage || !file_reader) {
        2:   26:        return;
        -:   27:    }
        -:   28:
       18:   29:    for (size_t i = 0; i < storage->size; ++i) {
       15:   30:        storage->points[i].x = (*read_number)(file_reader);
       15:   31:        storage->points[i].y = (*read_number)(file_reader);
        -:   32:    }
        -:   33:}
        -:   34:
        5:   35:double calculate_storage(Storage* storage,
        -:   36:    double (*cal)(const Point* a, const Point* b))
        -:   37:{
        5:   38:    if (!storage) {
        2:   39:        return 0;
        -:   40:    }
        -:   41:
        3:   42:    double total = 0;
       11:   43:    for (size_t i = 0; i < storage->size - 1; ++i)
        8:   44:        total += (*cal)(&storage->points[i], &storage->points[i + 1]);
        -:   45:
        3:   46:    return total;
        -:   47:}
        -:   48:
        9:   49:void delete_storage(Storage** storage)
        -:   50:{
        9:   51:    if (!(*storage)) {
        2:   52:        return;
        -:   53:    }
        -:   54:
        7:   55:    free((*storage)->points);
        7:   56:    free(*storage);
        7:   57:    (*storage) = NULL;
        -:   58:}
